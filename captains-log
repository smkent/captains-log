#!/usr/bin/env python

from __future__ import print_function

import argparse
import datetime
import inspect
import os
import subprocess
import sys
import tempfile

VERSION_FILE = '.captains-log'
VERSION_FILE_CONTENTS = '0'
DEFAULT_DATA_DIR = os.path.join(os.path.expanduser('~'),
                                '.smkent', 'captains-log')


class CaptainsLog():
    cmd_aliases = {'grep': 'search',
                   'h': 'history',
                   'l': 'read',
                   'log': 'read',
                   'r': 'read',
                   's': 'search',
                   'w': 'write'}

    def main(self):
        argv0 = os.path.basename(sys.argv[0])
        cmd_list = self.get_cmd_list()
        description = 'Captain\'s Log: A simple personal log application'
        epilog = ('Available commands: {}'.format(' '.join(cmd_list)))
        usage = '{} [options] command [command options]'.format(argv0)
        ap = argparse.ArgumentParser(description=description, epilog=epilog,
                                     usage=usage)
        ap.add_argument('-D', '--data-dir', metavar='dir',
                        default=DEFAULT_DATA_DIR, help='Data directory')
        ap.add_argument('cmd_args', metavar='text', nargs=argparse.REMAINDER,
                        help='Command or log text')
        self.args = ap.parse_args()

        # Determine if a command was specified, and invoke it with any
        # remaining arguments
        if self.args.cmd_args:
            if self.args.cmd_args[0] == '--':
                self.args.cmd_args.pop(0)
            cmd = self.args.cmd_args[0]
            if cmd in self.cmd_aliases:
                cmd = self.cmd_aliases.get(cmd)
            command_fn = None
            try:
                command_fn = getattr(CaptainsLog, 'cmd_{}'.format(cmd))
            except AttributeError:
                pass
            if command_fn:
                return command_fn(self, self.args.cmd_args[1:])

        # If no arguments were specified, invoke the write command
        if not self.args.cmd_args:
            return self.cmd_write()

        # No matching command was found but arguments are present.
        # If the command line arguments represent a parsable date, invoke
        # the read command and display the log for that date
        try:
            text_date = ' '.join(self.args.cmd_args)
            # Ignore result, just check if the text represents a date
            self.parse_date(text_date)
            return self.cmd_read(argv=[text_date])
        except subprocess.CalledProcessError:
            # The command line arguments do not represent a parsable date
            pass
        # If a single short option numeric argument is present (e.g. "-10"),
        # invoke the read command and display that number of log entries
        if (self.args.cmd_args[0].startswith('-') and
                self.args.cmd_args[0][1:].isdigit()):
            number = self.args.cmd_args.pop()[1:]
            if not len(self.args.cmd_args):
                return self.cmd_read(argv=['-n', number])
        # If no command was specified and no other intent can be determined,
        # treat all command line arguments as a log message to be automatically
        # appended to the log for the current date
        self.args.message = ' '.join(self.args.cmd_args)
        return self.cmd_write(argv=['--message', self.args.message])

    def cmd_read(self, argv=[]):
        description = 'Display existing log entries'
        ap = argparse.ArgumentParser(description=description)
        ap.add_argument('-n', dest='num', metavar='count', default=0, type=int,
                        help='Number of log entries to show')
        ap.add_argument('-f', '--from', dest='from_date', metavar='date',
                        help='Start showing log entries at this date')
        ap.add_argument('-u', '--until', dest='until_date', metavar='date',
                        help='Stop showing log entries at this date')
        ap.add_argument('single_date', metavar='date', nargs='?',
                        help='Display log for this date')
        self.cmd_args = ap.parse_args(argv)
        self.check_or_create_log_dir(create=False)
        # Determine date range to display
        if self.cmd_args.single_date:
            try:
                from_date = self.parse_date(self.cmd_args.single_date)
                until_date = from_date
            except subprocess.CalledProcessError:
                raise Exception('Unknown date '
                                '"{}"'.format(self.cmd_args.single_date))
        else:
            if self.cmd_args.from_date:
                from_date = self.parse_date(self.cmd_args.from_date)
            else:
                from_date = self.find_start_end_log_date(start=True) or \
                    datetime.datetime.today()
            if self.cmd_args.until_date:
                until_date = self.parse_date(self.cmd_args.until_date)
            else:
                until_date = self.find_start_end_log_date(start=False) or \
                    datetime.datetime.today()
        # Display the log
        first = True
        count = 0
        pager_cmd = subprocess.check_output(['git', 'config', '--get',
                                             'core.pager']).strip().split()
        if not pager_cmd:
            pager_cmd = ['less', '-X', '-R', '-F']
        p = subprocess.Popen(pager_cmd + ['-'], stdin=subprocess.PIPE)
        min_check = None
        for i in range((until_date - from_date).days, -1, -1):
            log_date = from_date + datetime.timedelta(days=i)
            if min_check:
                if min_check < log_date:
                    continue
            if not os.path.isdir(str(log_date.year)):
                min_check = datetime.datetime(log_date.year - 1, 12, 31)
                continue
            if not os.path.isdir(log_date.strftime('%Y/%m')):
                min_check = datetime.datetime(log_date.year, log_date.month, 1)
                min_check -= datetime.timedelta(days=1)
                continue
            lf = log_date.strftime('%Y/%m/%d')
            if not os.path.isfile(lf):
                continue
            if not first:
                print(file=p.stdin)
            display_date = self.format_display_date(log_date)
            print('>> {}{}'.format(display_date, os.linesep), file=p.stdin)
            with open(lf, 'r') as f:
                print(os.linesep.join(['    {}'.format(x) for x in
                                       f.read().strip().splitlines()]),
                      file=p.stdin)
            first = False
            count += 1
            if self.cmd_args.num > 0 and count >= self.cmd_args.num:
                break
        p.stdin.flush()
        p.communicate()
        sys.exit(0)

    def cmd_write(self, argv=[]):
        description = 'Write or append to a log entry'
        ap = argparse.ArgumentParser(description=description)
        ap.add_argument('-d', '--date', dest='date', metavar='date',
                        help='Write/append log entry for this date')
        ap.add_argument('-m', '--message', dest='message', metavar='text',
                        help='Log message to append')
        ap.add_argument('args_message', metavar='text', nargs='*',
                        help='Log message to append')
        self.cmd_args = ap.parse_args(argv)
        if self.cmd_args.args_message and not self.cmd_args.message:
            self.cmd_args.message = ' '.join(self.cmd_args.args_message)
        self.check_or_create_log_dir(create=True)
        log_date = self.parse_date(self.cmd_args.date, grace=True)
        display_date = self.format_display_date(log_date)
        log_file = log_date.strftime('%Y/%m/%d')
        log_dir = os.path.dirname(log_file)

        log_entry = None
        log_append = False
        existing_entry = self.get_log_entry(log_date)
        if self.cmd_args.message is not None:
            log_entry = self.cmd_args.message
            log_append = True
        else:
            with tempfile.NamedTemporaryFile() as f:
                if existing_entry:
                    f.write(existing_entry)
                f.write(os.linesep * 2)
                print('# Log entry for {}'.format(display_date), file=f)
                print('# Add your log entry above', file=f)
                print('# Lines starting with \'#\' will be ignored', file=f)
                print('#', file=f)
                print('# vim: ft=gitcommit', file=f)
                f.flush()
                subprocess.check_call([os.environ.get('EDITOR'), f.name])
                f.seek(0, 0)
                lines = f.readlines()
                entry_lines = []
                for line in lines:
                    if line.startswith('#'):
                        continue
                    entry_lines.append(line.strip())
                log_entry = os.linesep.join(entry_lines).strip()
        if log_entry == existing_entry:
            print('Log entry unmodified, exiting.', file=sys.stderr)
            return
        if not log_entry:
            print('No entry text, exiting.', file=sys.stderr)
            return
        print('Writing log entry for {}.'.format(display_date))
        if not os.path.isdir(log_dir):
            os.makedirs(log_dir, 0o0700)
        log_exists = os.path.isfile(log_file)
        with open(log_file, 'a' if log_append else 'w') as f:
            if log_append:
                f.write(os.linesep)
            f.write(log_entry)
            f.write(os.linesep)
        git_status = subprocess.check_output(['git', 'status', '--short',
                                              '--', log_file]).strip()
        if git_status:
            subprocess.check_call(['git', 'add', '--', log_file])
            message = '{} log for {}'.format('Update' if log_exists else
                                             'Create',
                                             display_date)
            subprocess.check_call(['git', 'commit', '-m', message])
        else:
            print('No changes to commit.', file=sys.stderr)

    def cmd_search(self, argv=[]):
        description = 'Search previous log entries'
        epilog = 'All arguments are passed directly to git grep.'
        ap = argparse.ArgumentParser(description=description, epilog=epilog)
        _, grep_args = ap.parse_known_args(argv)
        self.check_or_create_log_dir(create=False)
        return subprocess.call(['git', 'grep'] + grep_args)

    def cmd_history(self, argv=[]):
        description = 'Display changes to the log'
        epilog = 'All arguments are passed directly to git grep.'
        ap = argparse.ArgumentParser(description=description, epilog=epilog)
        self.cmd_args = ap.parse_args(argv)
        self.check_or_create_log_dir(create=False)
        return subprocess.call(['git', 'log', '-p', '--'])

    def check_or_create_log_dir(self, create=False):
        if not os.path.isdir(self.args.data_dir):
            os.makedirs(self.args.data_dir, 0o0700)
        os.chdir(self.args.data_dir)
        if os.path.isfile(VERSION_FILE):
            with open(VERSION_FILE, 'r') as f:
                if f.read().strip() != VERSION_FILE_CONTENTS:
                    raise Exception('Log storage version mismatch')
            if not os.path.isdir('.git'):
                raise Exception('The log repository is missing')
        else:
            if not create:
                raise Exception('Directory does not contain a log')
            if os.path.isdir('.git'):
                raise Exception('There is an existing repository in this '
                                'directory')
            subprocess.check_call(['git', 'init'])
            with open(VERSION_FILE, 'w') as f:
                f.write(VERSION_FILE_CONTENTS)
            subprocess.check_call(['git', 'add', VERSION_FILE])
            subprocess.check_call(['git', 'commit', '-m',
                                   'Create new log directory'])

    def get_log_entry(self, log_date):
        log_file = log_date.strftime('%Y/%m/%d')
        if not os.path.isfile(log_file):
            return None
        with open(log_file, 'r') as f:
            return f.read().strip()

    def parse_date(self, parse_date, grace=False):
        if not parse_date:
            if grace:
                return datetime.datetime.today() - datetime.timedelta(hours=2)
            return datetime.datetime.today()
        cmd = ['date', '+%s', '--date={}'.format(parse_date)]
        output = subprocess.check_output(cmd, stderr=open('/dev/null', 'w'))
        dt_time = datetime.datetime.fromtimestamp(float(output))
        return datetime.datetime(dt_time.year, dt_time.month, dt_time.day)

    def format_display_date(self, date):
        return date.strftime('%A, %B %-d, %Y')

    def find_start_end_log_date(self, start=True):
        # Recurse into year and month directories in order to find the earliest
        # dated log entry
        def _log_entry_search(search_dir, min_length=1, level=2):
            dir_contents = sorted(os.listdir(search_dir), reverse=not start)
            for i in dir_contents:
                if len(i) < min_length or not i.isdigit():
                    continue
                if level > 0:
                    l = _log_entry_search(os.path.join(search_dir, i),
                                          level=(level - 1))
                    if not l:
                        continue
                    return l + [int(i)]
                else:
                    return [int(i)]
            return None
        log_date = _log_entry_search('.', 4)
        if not log_date:
            return None
        return datetime.datetime(log_date[2], log_date[1], log_date[0])

    def get_cmd_list(self):
        cmd_list = []
        for m in inspect.getmembers(self, predicate=inspect.ismethod):
            if m[0].startswith('cmd_'):
                cmd_list.append(m[0][4:])
        return cmd_list


if __name__ == '__main__':
    try:
        cl = CaptainsLog()
        cl.main()
    except Exception as e:
        print('Error: {}'.format(str(e)), file=sys.stderr)
        sys.exit(1)
